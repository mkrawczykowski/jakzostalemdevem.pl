@use '../global/variables';
@use 'sass:math';

// $colWidth:  (round(math.div(variables.$container-width, 12) * 10) / 10) * 1rem;
$colWidth:  math.div(100%, 12);

.container{
  max-width: calc((variables.$container-width + variables.$containerHorizontalPadding * 2) * 1rem);
  padding: 0 calc(variables.$containerHorizontalPadding) * 1rem;
  margin: 0 auto;

  .row{
    display: flex;
    margin-left: calc(variables.$gap / 2 * -1);
    margin-right: calc(variables.$gap / 2 * -1);
    justify-content: flex-start;
    align-items: flex-start;
    flex-wrap: wrap;

    .col{
      padding-right: calc(variables.$gap / 2);
      padding-left: calc(variables.$gap / 2);
      // flex-basis: 100%;
      // flex-grow: 0;
      // max-width: 100%;
    }

    @each $breakpointName, $breakpointValue in variables.$breakpoints {
      $indexBreakpoint: index((variables.$breakpoints), ($breakpointName, $breakpointValue));
      $breakpointValuePx: $breakpointValue * 1px;

      @media screen and (min-width:#{$breakpointValuePx}){
        @for $i from 1 through 12{
          .col-#{$breakpointName}-#{$i} {
            width: calc(#{$colWidth} * #{$i});
            $parentWidth: $colWidth * $i;

            @for $childIndex from 1 through 12{
              .col-#{$breakpointName}-#{$childIndex} {
                $fullToParentRatio: math.div(12,$i);
                $parentToChildRatio: math.div(12,$i);
                // width: calc(#{$parentWidth} * #{$fullToParentRatio});
                
                width: calc(#{$parentWidth} * #{$fullToParentRatio} );
              }
            }



            // .col-lg-6{
            //   $test: math.div(12,6);
            //   width: calc(math.div(#{$parentWidth}, #{$test}));
            // }
          }
        }
      }
    }
  }  
}


